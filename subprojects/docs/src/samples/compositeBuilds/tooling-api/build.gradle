/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.tooling.GradleConnector
import org.gradle.tooling.connection.GradleConnection

private openCompositeConnection() {
    def projectA = file("projects/projectA")
    def projectB = file("projects/projectB")
    def projectC = file("projects/projectC")

    def gradleHome = project.gradle.gradleHomeDir

    def builder = GradleConnector.newGradleConnection()
    builder.addParticipant(projectA).useInstallation(gradleHome)
    builder.addParticipant(projectB).useInstallation(gradleHome)
    builder.addParticipant(projectC).useInstallation(gradleHome)
    builder.useInstallation(gradleHome)

    // Switch to disable (experimental) dependency substitution
    def integrated = project.hasProperty('integrated') ? Boolean.valueOf(project.property("integrated") as String) : true
    builder.integratedComposite(integrated)

    return builder.build()
}

private executeTask(GradleConnection connection, String build, String... tasks) {
    logger.lifecycle("Running tasks ${tasks} in build: ${build}")
    def rootDir = file("projects/${build}")
    def buildLauncher = connection.newBuild()
    buildLauncher.forTasks(rootDir, tasks)
    buildLauncher.standardOutput = System.out
    buildLauncher.standardError = System.err
    buildLauncher.run()
}

task showDependencies << {
    def connection = openCompositeConnection()
    try {
        executeTask(connection, "projectA", ":dependencies")
    } finally {
        connection.close()
    }
}

task build << {
    def connection = openCompositeConnection()
    try {
        executeTask(connection, "projectA", ":assemble")
    } finally {
        connection.close()
    }
}

task idea << {
    def connection = openCompositeConnection()
    try {
        executeTask(connection, "projectA", ":idea")
    } finally {
        connection.close()
    }
}

task cleanIdea << {
    def connection = openCompositeConnection()
    try {
        executeTask(connection, "projectC", ":cleanIdea")
        executeTask(connection, "projectB", ":b1:cleanIdea", ":b2:cleanIdea", ":cleanIdea")
        executeTask(connection, "projectA", ":cleanIdea")
    } finally {
        connection.close()
    }
}

task publishAll << {
    def connection = openCompositeConnection()
    try {
        executeTask(connection, "projectC", ":uploadArchives")
        executeTask(connection, "projectB", ":b1:uploadArchives", ":b2:uploadArchives")
        executeTask(connection, "projectA", ":uploadArchives")
    } finally {
        connection.close()
    }
}
