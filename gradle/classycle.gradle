allprojects {
    ext.useClassycle = { params = [:] ->
        def excludePatterns = params.exclude ?: []

        configurations {
            classycle
        }

        dependencies {
            classycle 'classycle:classycle:1.4@jar'
        }

        task classycle

        sourceSets.all { sourceSet ->
            def taskName = sourceSet.getTaskName('classycle', null)
            task(taskName) {
                def reportFile = reporting.file("classcycle/${sourceSet.name}.txt")
                def analysisFile = reporting.file("classcycle/${sourceSet.name}_analysis.xml")
                inputs.files sourceSet.output
                outputs.file reportFile
                doLast { task ->
                    if (!sourceSet.output.classesDir.directory) {
                        return;
                    }
                    def antBuilder = it.services.get(org.gradle.api.internal.project.IsolatedAntBuilder)
                    antBuilder.withClasspath(configurations.classycle.files).execute {
                        ant.taskdef(name: "classycleDependencyCheck", classname: "classycle.ant.DependencyCheckingTask")
                        ant.taskdef(name: "classycleReport", classname: "classycle.ant.ReportTask")
                        reportFile.parentFile.mkdirs()
                        try {
                            ant.classycleDependencyCheck(reportFile: reportFile, failOnUnwantedDependencies: true, mergeInnerClasses: true,
                                """
                        show allResults
                        check absenceOfPackageCycles > 1 in org.gradle.*
                    """
                            ) {
                                fileset(dir: sourceSet.output.classesDir) {
                                    excludePatterns.each { excludePattern ->
                                        exclude(name: excludePattern)
                                    }
                                }
                            }
                        } catch (e) {
                            try {
                                ant.unzip(src: rootProject.file("gradle/classycle_report_resources.zip"), dest: reporting.file("classcycle"))
                                ant.classycleReport(reportFile: analysisFile, reportType: 'xml', mergeInnerClasses: true, title: "${task.project.name} ${sourceSet.name} (${task.path})") {
                                    fileset(dir: sourceSet.output.classesDir) {
                                        excludePatterns.each { excludePattern ->
                                            exclude(name: excludePattern)
                                        }
                                    }
                                }
                            } catch (e2) {
                                e2.printStackTrace()
                            }
                            def clickableUrl = {
                                new URI("file", "", it.toURI().getPath(), null, null).toString()
                            }
                            throw new RuntimeException("Classycle check failed: $e.message. See failure report at ${clickableUrl(reportFile)} and analysis report at ${clickableUrl(analysisFile)}", e)
                        }
                    }
                }
            }
            classycle.dependsOn taskName
            check.dependsOn taskName
            codeQuality.dependsOn taskName
        }
    }
}
